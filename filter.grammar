(def @gt (string ">"))
(def @le (string "<"))
(def @geq (string ">="))
(def @leq (string "<="))
(def @eq (string "="))
(def @gt_token (string ">t"))
(def @le_token (string "<t"))

(rule $CompareValue ($Number) (IdentityFn))
(rule $CompareValue ($PhraseValue) (IdentityFn))

(rule $Strict (strictly) (ConstantFn null))

(rule $GreaterToken (after) (ConstantFn @gt_token))
(rule $GreaterToken (greater) (ConstantFn @gt_token))
(rule $GreaterToken (larger) (ConstantFn @gt_token))
(rule $GreaterToken (more) (ConstantFn @gt_token))
(rule $GreaterToken (no $LessToken) (ConstantFn @gt_token))
(rule $GreaterToken (>) (ConstantFn @gt_token))

(rule $CompareGreater ($GreaterToken) (ConstantFn @geq))
(rule $CompareGreater (>) (ConstantFn @gt))
(rule $CompareGreater (>=) (ConstantFn @geq))
(rule $CompareGreater (> =) (ConstantFn @geq))
(rule $CompareGreater ($GreaterToken ($TOKEN optional) equal ($TOKEN optional)) (ConstantFn @geq))
(rule $CompareGreater ($Strict $GreaterToken) (ConstantFn @gt))

(rule $LessToken (before) (ConstantFn @le_token))
(rule $LessToken (less) (ConstantFn @le_token))
(rule $LessToken (fewer) (ConstantFn @le_token))
(rule $LessToken (smaller) (ConstantFn @le_token))
(rule $LessToken (no $GreaterToken) (ConstantFn @le_token))

(rule $CompareLess ($LessToken) (ConstantFn @leq))
(rule $CompareLess (<) (ConstantFn @le))
(rule $CompareLess (<=) (ConstantFn @leq))
(rule $CompareLess (< =) (ConstantFn @leq))
(rule $CompareLess ($LessToken ($TOKEN optional) equal ($TOKEN optional)) (ConstantFn @leq))
(rule $CompareLess ($Strict $LessToken) (ConstantFn @le))

(rule $EqualToken ($TOKEN) (FilterTokenFn lemma be equal =))
(rule $CompareEqual ($EqualToken) (ConstantFn @eq))

(def @between (string "between"))
(rule $Between (within) (ConstantFn @between))
(rule $Between (between) (ConstantFn @between))
(rule $BetweenPair ($Between) (ConstantFn (lambda x (lambda y (lambda z (call + (var z) (string " >= ") (call .toString (var x)) (string " <= ") (call .toString (var y))))))))
(rule $BetweenPartial ($BetweenPair $CompareValue) (JoinFn forward))
(rule $CompareBetween ($BetweenPartial ($Conj optional) $CompareValue) (JoinFn forward))

(rule $Compare ($CompareGreater) (IdentityFn))
(rule $Compare ($CompareLess) (IdentityFn))
(rule $Compare ($CompareEqual) (IdentityFn))
(rule $Compare ($Compare $StopCompare) (SelectFn 0))
(rule $Compare ($StopCompare $Compare) (SelectFn 1))

# mpg between 13 and 15
(rule $Condition ($Dim $CompareBetween) (JoinFn backward))
# mpg greater than 13
(rule $Condition ($Dim $Compare $CompareValue) (ConcatFn " "))
# mpg greater than 15 and cylinders smaller than 10
(rule $Condition ($Condition ($Conj optional) $Condition) (ConcatFn " "))

(def @filter (string "filter"))
(rule $FilterWord (filter) (ConstantFn @filter))
(rule $FilterWord ($ShowVerb ($Only optional)) (ConstantFn @filter))

(rule $PrepFilterToken ($TOKEN) (FilterTokenFn lemma by with that satisfy))
(rule $PrepFilter ($PrepFilterToken) (ConstantFn @filter))

(def @find (string "find"))
(rule $FindWord (find) (ConstantFn @find))
(rule $FindWord (search (for optional)) (ConstantFn @find))
(rule $FindWord (look for) (ConstantFn @find))
(rule $FindWord ($FindWord $StopNoun ($PrepFilter optional)) (ConstantFn @find))


# with mpg greater than 5
(rule $FilterCondition ($PrepFilter $Condition) (ConcatFn " "))

(rule $FilterPartial ($PrepFilter) (ConstantFn (lambda x (call + (string "filter ") (var x)))))
(rule $FilterPartial2 ($PrepFilter) (ConstantFn (lambda y (lambda x (call + (var x) (string " filter ") (var y))))))

(rule $FindPartial ($PrepFilter) (ConstantFn (lambda x (call + (string "find ") (var x)))))
(rule $FindPartial2 ($PrepFilter) (ConstantFn (lambda y (lambda x (call + (var x) (string " find ") (var y))))))

# cars with mpg greater than 15
(rule $Filter (($StopNoun optional) $FilterPartial $Condition) (JoinFn forward))

# find cars with mpg greater than 15
(rule $Find ($FindWord $Condition) (ConcatFn " "))

# show/find cars with mpg greater than 15
(rule $Filter2 (($StopNoun optional) $FilterPartial2 $Condition) (JoinFn forward))
(rule $Plot ($PlotPhrase $Filter2) (JoinFn backward))
(rule $Find2 ($FindWord ($StopNoun optional) $FindPartial2 $Condition) (JoinFn forward))
(rule $Plot ($PlotPhrase $Find2) (JoinFn backward))

# show/find cars with mpg smaller than 15 in a histogram
(rule $Plot (($Show optional) $Filter ($Prep optional) $ChartPartial) (JoinFn backward))
(rule $Plot (($Show optional) $Find ($Prep optional) $ChartPartial) (JoinFn backward))

# show/find mpg greater than 15
(rule $Find ($FindWord $Condition) (ConcatFn " "))
(rule $Filter ($FilterWord $Condition) (ConcatFn " "))

### Application ###
(rule $Command ($Filter) (IdentityFn))
(rule $Command ($Find) (IdentityFn))
