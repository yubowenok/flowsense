### Filters (range, pattern)
(def @geq ">=")
(def @leq "<=")
(def @eq "=")
(def @between "[]")
(def @pattern (string "pattern"))

(rule $EqualToken ($TOKEN) (FilterTokenFn lemma be equal =))
(rule $EqualPhrase ($EqualToken ($Prep optional)) (ConstantFn @eq))

(rule $GreaterToken ($TOKEN) (FilterTokenFn lemma after greater larger more >))
(rule $GreaterToken (> =) (ConstantFn @geq))
(rule $GreaterToken (no $LessToken) (ConstantFn @geq))
(rule $GreaterToken ($GreaterToken $Prep) (SelectFn 0))

(rule $GreaterPhrase ($GreaterToken) (ConstantFn @geq))
(rule $GreaterPhrase ($GreaterToken ($Conj optional) $EqualPhrase) (ConstantFn @geq))

(rule $LessToken ($TOKEN) (FilterTokenFn lemma before less fewer smaller <))
(rule $LessToken (< =) (ConstantFn @leq))
(rule $LessToken (no $GreaterToken) (ConstantFn @leq))
(rule $LessToken ($LessToken $Prep) (SelectFn 0))

(rule $LessPhrase ($LessToken) (ConstantFn @leq))
(rule $LessPhrase ($LessToken ($Conj optional) $EqualPhrase) (ConstantFn @leq))

(rule $BetweenToken ($TOKEN) (FilterTokenFn lemma between within in among from))
(rule $BetweenPhrase ($BetweenToken) (ConstantFn @between))

(rule $Compare ($GreaterPhrase $Value) (ConcatFn ":"))
(rule $Compare ($LessPhrase $Value) (ConcatFn ":"))
(rule $Compare ($EqualPhrase $Value) (ConcatFn ":"))
(rule $Compare ($BetweenPhrase $NumericalRange) (ConcatFn ":"))

# Pattern filter
(rule $PatternToken ($TOKEN) (FilterTokenFn lemma with have contain include match))
(rule $PatternPhrase ($PatternToken) (ConstantFn @pattern))

(rule $Compare ($PatternPhrase $StringValue) (ConcatFn ":"))

# greater than 13 and smaller than 15
(rule $Compare ($Compare ($Conj optional) $Compare) (ConcatFn ":"))

(rule $Condition (($Prep optional) $Column $Compare) (ConcatFn ":"))
# with name (of) amc
(rule $Condition (($Prep optional) $Column ($Prep optional) $Value) (ConcatFn ":=:"))

(rule $Filter (($Verb optional) ($StopNoun optional) ($Descriptor optional) $Condition) (ConcatFn prepend "filter:"))

### Sampler
(def @max "max")
(def @min "min")
(def @random "random")
(rule $MaxToken ($TOKEN) (FilterTokenFn token max maximal maximum))
(rule $Maximum ($MaxToken) (ConstantFn @max))
(rule $MinToken ($TOKEN) (FilterTokenFn token min minimal minimum))
(rule $Minimum ($MinToken) (ConstantFn @min))
(rule $Extremum ($Maximum) (IdentityFn))
(rule $Extremum ($Minimum) (IdentityFn))

(rule $SampleCriteria ($Extremum) (IdentityFn))
(rule $SampleCriteria (random) (ConstantFn @random))

(rule $SampleAmountCriteria ($CountOrPercent $SampleCriteria) (ConcatFn reverse ":"))
(rule $SampleAmountCriteria ($SampleCriteria $CountOrPercent) (ConcatFn ":"))

(rule $SampleCondition ($SampleAmountCriteria ($Prep optional) $Column) (ConcatFn reverse ":"))
(rule $SampleCondition ($Column ($Descriptor optional) $SampleAmountCriteria) (ConcatFn ":"))
# 5 cars with max mpg
(rule $SampleCondition ($CountOrPercent ($StopNoun optional) ($Descriptor optional) $SampleCriteria $Column) (ConcatFn reverse ":"))
# Default count = 1
# car with max mpg
(rule $SampleConditionNoCount ($SampleCriteria $Column) (ConcatFn reverse ":"))
(rule $SampleCondition ($SampleConditionNoCount) (ConcatFn append ":1"))

# sample 5 percent
(rule $SampleVerb_ ($Verb) (FilterTokenFn lemma sample get))
(rule $SampleVerb ($SampleVerb_) (ConstantFn ""))
(rule $SampleShortcut ($SampleVerb $CountOrPercent ($Prep optional) ($StopNoun optional)) (ConcatFn "_index:random:"))

(rule $Sample_ (($Verb optional) $SampleCondition) (IdentityFn))
(rule $Sample_ ($SampleShortcut) (IdentityFn))
# find ... group by origin
(rule $Sample_ ($Sample_ $GroupByColumn) (ConcatFn ":"))

(rule $Sample (($Verb optional) ($StopNoun optional) ($Descriptor optional) $Sample_) (ConcatFn prepend "filter:"))

### Application ###
(rule $Command ($Filter) (IdentityFn))
(rule $Command ($Sample) (IdentityFn))

(rule $Command ($SampleCondition) (IdentityFn))
