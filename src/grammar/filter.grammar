(def @filter_marker (string "r_filter"))
(rule $FilterVerb_ ($TOKEN) (FilterTokenFn token r_filter))
(rule $FilterVerb_ ($Verb) (FilterTokenFn lemma sample find get))
(rule $FilterVerb ($FilterVerb_ ($Rp optional)) (ConstantFn @filter_marker))

### Range, pattern
(def @geq ">=")
(def @leq "<=")
(def @eq "=")
(def @between "[]")
(def @pattern (string "pattern"))

(rule $InverseToken ($TOKEN) (FilterTokenFn lemma no not))

(rule $EqualToken ($TOKEN) (FilterTokenFn lemma be equal =))
(rule $EqualPhrase ($EqualToken ($Prep optional)) (ConstantFn @eq))

(rule $GreaterToken ($TOKEN) (FilterTokenFn lemma after greater larger more >))
(rule $GreaterToken (> =) (ConstantFn @geq))
(rule $GreaterToken ($InverseToken $LessToken) (ConstantFn @geq))
(rule $GreaterToken ($GreaterToken $Prep) (SelectFn 0))

(rule $GreaterPhrase ($GreaterToken) (ConstantFn @geq))
(rule $GreaterPhrase ($GreaterToken ($Conj optional) $EqualPhrase) (ConstantFn @geq))

(rule $LessToken ($TOKEN) (FilterTokenFn lemma before less fewer smaller <))
(rule $LessToken (< =) (ConstantFn @leq))
(rule $LessToken ($InverseToken $GreaterToken) (ConstantFn @leq))
(rule $LessToken ($LessToken $Prep) (SelectFn 0))

(rule $LessPhrase ($LessToken) (ConstantFn @leq))
(rule $LessPhrase ($LessToken ($Conj optional) $EqualPhrase) (ConstantFn @leq))

(rule $BetweenToken ($TOKEN) (FilterTokenFn lemma between within in among from))
(rule $BetweenPhrase ($BetweenToken) (ConstantFn @between))

(rule $Compare ($GreaterPhrase $Value) (ConcatFn ":"))
(rule $Compare ($LessPhrase $Value) (ConcatFn ":"))
(rule $Compare ($EqualPhrase $Value) (ConcatFn ":"))
(rule $Compare ($BetweenPhrase $NumericalRange) (ConcatFn ":"))

# Pattern filter
(rule $PatternToken ($TOKEN) (FilterTokenFn lemma with have contain include match))
(rule $PatternPhrase ($PatternToken) (ConstantFn @pattern))

(rule $Compare ($PatternPhrase $StringValue) (ConcatFn ":"))

# greater than 13 and smaller than 15
(rule $Compare ($Compare ($Conj optional) $Compare) (ConcatFn ":"))

(rule $PatternOrRangeCondition (($Prep optional) $Column $Compare) (ConcatFn ":"))
# with name of amc
(rule $EqualValue ($Prep $StringValue) (SelectFn 1))
(rule $PatternOrRangeCondition (($Prep optional) $Column $EqualValue) (ConcatFn ":=:"))

(rule $PatternOrRange ($PatternOrRangeCondition) (IdentityFn))

### Extremum
(def @max "max")
(def @min "min")
(rule $MaxToken ($TOKEN) (FilterTokenFn token max maximal maximum))
(rule $Maximum ($MaxToken) (ConstantFn @max))
(rule $MinToken ($TOKEN) (FilterTokenFn token min minimal minimum))
(rule $Minimum ($MinToken) (ConstantFn @min))

(rule $ExtremumCriteria ($Maximum) (IdentityFn))
(rule $ExtremumCriteria ($Minimum) (IdentityFn))
(rule $ExtremumCondition ($ExtremumCriteria $Column) (ConcatFn reverse ":extremum:"))
(rule $ExtremumCondition ($Column $ExtremumCriteria) (ConcatFn ":extremum:"))

# 5 cars having maximum mpg
(rule $Extremum_ ($CountOrPercent ($StopNoun optional) ($Descriptor optional) $ExtremumCondition) (ConcatFn reverse ":"))
# shortcut: car with max mpg, default count = 1
(rule $Extremum_ (($StopNoun optional) ($Descriptor optional) $ExtremumCondition) (ConcatFn append ":1"))

(rule $Extremum_ ($Extremum_ $GroupByColumn) (ConcatFn ":"))

(rule $Extremum ($Extremum_) (IdentityFn))

### Sampling
(def @sampling "sampling")

(rule $SampleAmount ($CountOrPercent ($StopNoun optional) ($Prep optional) $Column) (ConcatFn reverse ":sampling:"))
(rule $SampleAmount ($Column ($Descriptor optional) $CountOrPercent ($StopNoun optional)) (ConcatFn ":sampling:"))

# sample 5 percent (no column)
(rule $SampleShortcut ($CountOrPercent ($Prep optional) ($StopNoun optional)) (ConcatFn prepend "_index:sampling:"))

(rule $Sample_ ($SampleAmount) (IdentityFn))
(rule $Sample_ ($SampleShortcut) (IdentityFn))

# find ... group by origin
(rule $Sample_ ($Sample_ $GroupByColumn) (ConcatFn ":"))

(rule $Sample ($Sample_) (IdentityFn))

(rule $Filter_ ($PatternOrRange) (IdentityFn))
(rule $Filter_ ($Extremum) (IdentityFn))
(rule $Filter_ ($Sample) (IdentityFn))
(rule $Filter (($FilterVerb optional) ($StopNoun optional) ($Descriptor optional) $Filter_) (ConcatFn prepend "filter:"))

(rule $Command ($Filter) (IdentityFn))

# Chart creation with filter
(rule $Command ($Chart $Filter) (ConcatFn ";"))
