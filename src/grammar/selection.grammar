(def @highlight (string "highlight"))
(def @selection (string "_selection"))

# highlight
(rule $HighlightVerb ($TOKEN) (FilterTokenFn lemma highlight brush r_highlight))
(rule $Highlight ($HighlightVerb) (ConstantFn @highlight))

# selection
(rule $SelectVerb ($TOKEN) (FilterTokenFn lemma select choose r_select))

(rule $SelectToken_ ($SelectVerb) (IdentityFn))
(rule $SelectToken_ ($TOKEN) (FilterTokenFn lemma chosen selected selection))
(rule $SelectToken ($SelectToken_) (ConstantFn "select"))

(rule $SelectionPhrase (($Prep optional) $SelectToken ($StopNoun optional)) (ConstantFn @selection))

(rule $SelectionSource_ ($ChartDescriptor $SelectionPhrase) (ConcatFn ":"))
(rule $SelectionSource_ ($SelectionPhrase $ChartDescriptor) (ConcatFn reverse ":"))
(rule $SelectionSource ($SelectionSource_) (ConcatFn prepend "source:"))
(rule $SelectionSource ($SelectionPhrase) (ConcatFn prepend "source:"))

# from node.grammar
(rule $Source_ ($SelectionPhrase $Source_) (ConcatFn reverse ":"))
(rule $Source_ ($SelectionPhrase) (IdentityFn))
(rule $ChartShortcut ($ChartShortcut $SelectionSource) (ConcatFn ";"))

(rule $Node ($SelectionPhrase $Node) (ConcatFn reverse ":"))
(rule $Node ($Node $SelectionPhrase) (ConcatFn ":"))

(rule $SelectionDescriptor ($SelectionPhrase) (ConcatFn prepend "source:"))
(rule $SelectionColumns ($Columns $SelectionDescriptor) (ConcatFn ";"))
(rule $SelectionColumns ($SelectionDescriptor $Columns) (ConcatFn reverse ";"))
(rule $Columns ($SelectionColumns) (IdentityFn))

(rule $SelectWithCondition ($SelectToken $Filter) (ConcatFn ";"))

# find selected
(rule $FilterSelection ($FilterVerb $SelectionPhrase) (ConstantFn @selection))
(rule $Source_ ($FilterSelection) (IdentityFn))

(rule $Command ($Highlight) (IdentityFn))
(rule $Command ($SelectWithCondition) (IdentityFn))
