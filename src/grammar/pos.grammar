# Conjunction
(rule $Conj ($TOKEN) (FilterPosTagFn token CC))
(rule $Conj ($TOKEN) (FilterTokenFn lemma and with , ;))
(rule $Conj (or) (ConstantFn "or"))

# Marker
(rule $Marker ($TOKEN) (FilterMarkerFn accept))
(rule $NonMarker ($TOKEN) (FilterMarkerFn reject))
(rule $NonMarkerPhrase ($NonMarker) (IdentityFn))
(rule $NonMarkerPhrase ($NonMarker $NonMarkerPhrase) (ConstantFn ""))

# Adverb
(rule $Adverb ($TOKEN) (FilterPosTagFn token RB RBR RBS))

# Preposition
# IN, TO: in, within, to
# VBG: using
(rule $Prep ($TOKEN) (FilterPosTagFn token IN TO VBG))
# Multiple preps are usually redundant. Take the last one.
(rule $Prep ($Prep $Prep) (SelectFn 1))

# Verb
(rule $Verb ($TOKEN) (FilterPosTagFn token VB VBN VBP))
# e.g. search for
(rule $Verb ($Verb $Prep) (SelectFn 0))
# e.g. show only
(rule $Verb ($Verb $Adverb) (SelectFn 0))
(rule $Verb ($Adverb $Verb) (SelectFn 1))
# Handle special verbs that can be recognized as NN/JJ
(rule $Verb ($TOKEN) (FilterTokenFn lemma show map change load open sample))

# Adjective
(rule $Adj ($TOKEN) (FilterPosTagFn token JJ JJS))
(rule $Adj ($Adverb $Adj) (SelectFn 1))
# Handle special adjectives that can be recognized as NN
(rule $Adj ($TOKEN) (FilterTokenFn lemma auto))

# To connectors
(rule $To_ ($TOKEN) (FilterPosTagFn token TO VBD-AUX))
(rule $To_ ($TOKEN) (FilterTokenFn token equal =))
(rule $To ($To_) (ConstantFn ""))

# "over" is a specification for series column
(def @over (string "over"))
(rule $PrepOverToken ($TOKEN) (FilterTokenFn lemma over by along))
(rule $PrepOver ($PrepOverToken) (ConstantFn @over))

# "from" is a specification for diagram connection source
(def @from (string "from"))
(rule $PrepFrom_ ($TOKEN) (FilterTokenFn lemma from of))
(rule $PrepFrom ($PrepFrom_) (ConstantFn @from))

# "to" is a specification for diagram connection target
(def @to (string "to"))
(rule $PrepTo_ ($TOKEN) (FilterTokenFn lemma in to onto into as))
(rule $PrepTo_ (in to) (IdentityFn))
(rule $PrepTo_ (on to) (IdentityFn))
(rule $PrepTo ($PrepTo_) (ConstantFn @to))

(def @by (string "by"))
(rule $PrepBy ($Prep) (FilterPosTagFn token IN))

# Determiner
# DT: a, the, that, these
(rule $Det ($TOKEN) (FilterPosTagFn token DT WDT PRP)) # PRP$

# Quantifier
(def @quant_one (string "one"))
(def @quant_all (string "all"))
(rule $QuantAny_ ($TOKEN) (FilterTokenFn lemma a an one any))
(rule $QuantAny ($QuantAny_) (ConstantFn @quant_one))
(rule $QuantAll_ ($TOKEN) (FilterTokenFn lemma every all))
(rule $QuantAll ($QuantAll_) (ConstantFn @quant_all))

# RP: take "down", bring "up"
(rule $Rp ($TOKEN) (FilterPosTagFn token RP))

# Descriptor
# e.g. that has, that satisfy
(rule $Descriptor_ ($TOKEN) (FilterTokenFn lemma with that satisfy have))
(rule $Descriptor ($Descriptor_ ($Descriptor_ optional)) (ConstantFn ""))
