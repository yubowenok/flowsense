### Auxiliary tokens ###
(def @conj_and (string "and"))
(def @conj_or (string "or"))
(rule $Conj (and) (ConstantFn @conj_and))
(rule $Conj (or) (ConstantFn @conj_or))

(def @prep (string "(prep)"))
(rule $Prep (about) (ConstantFn @prep))
(rule $Prep (for) (ConstantFn @prep))
(rule $Prep (from) (ConstantFn @prep))
(rule $Prep (in) (ConstantFn @prep))
(rule $Prep (into) (ConstantFn @prep))
(rule $Prep (of) (ConstantFn @prep))
(rule $Prep (on) (ConstantFn @prep))
(rule $Prep (onto) (ConstantFn @prep))
(rule $Prep (to) (ConstantFn @prep))
(rule $Prep (with) (ConstantFn @prep))
(rule $Prep (within) (ConstantFn @prep))

(rule $PrepOf (from) (ConstantFn @prep))
(rule $PrepOf (in) (ConstantFn @prep))
(rule $PrepOf (of) (ConstantFn @prep))

(rule $PrepTo (in) (ConstantFn @prep))
(rule $PrepTo (into) (ConstantFn @prep))
(rule $PrepTo (onto) (ConstantFn @prep))

(rule $Time ($PHRASE) (DateFn))
(rule $Number ($PHRASE) (NumberFn))

(def @det (string "(det)"))
(rule $Det (a) (ConstantFn @det))
(rule $Det (an) (ConstantFn @det))
(rule $Det (the) (ConstantFn @de))

(def @verb (string "(verb)"))

(def @passive_object (string "(object)"))
(rule $PassiveObject (me) (ConstantFn @passive_object))
(rule $PassiveObject (us) (ConstantFn @passive_object))

(def @quant_one (string "one"))
(def @quant_all (string "all"))
(rule $QuantAny (a) (ConstantFn @quant_one))
(rule $QuantAny (an) (ConstantFn @quant_one))
(rule $QuantAny (one) (ConstantFn @quant_one))
(rule $QuantAny (any) (ConstantFn @quant_one))
(rule $QuantAll (every) (ConstantFn @quant_all))
(rule $QuantAll (all) (ConstantFn @quant_all))

(def @increase (string "+"))

(rule $Increase (add) (ConstantFn @increase))
(rule $Increase (big) (ConstantFn @increase))
(rule $Increase (bold) (ConstantFn @increase))
(rule $Increase (increase) (ConstantFn @increase))
(rule $Increase (increment) (ConstantFn @increase))
(rule $Increase (large) (ConstantFn @increase))
(rule $Increase (more) (ConstantFn @increase))
(rule $Increase (prominent) (ConstantFn @increase))
(rule $Increase (thick) (ConstantFn @increase))
(rule $Increase (+) (ConstantFn @increase))
(def @decrease (string "-"))
(rule $Decrease (decrease) (ConstantFn @increase))
(rule $Decrease (deduct) (ConstantFn @increase))
(rule $Decrease (less) (ConstantFn @decrease))
(rule $Decrease (reduce) (ConstantFn @increase))
(rule $Decrease (small) (ConstantFn @decrease))
(rule $Decrease (thin) (ConstantFn @decrease))
(rule $Decrease (-) (ConstantFn @decrease))
(rule $ValueChange ($Increase) (IdentityFn))
(rule $ValueChange ($Decrease) (IdentityFn))
(rule $ValueChange ($LEMMA_TOKEN) (IdentityFn))

(def @dark (string "dark"))
(def @bright (string "bright"))
(rule $ColorChange (dark) (ConstantFn @dark))
(rule $ColorChange (dim) (ConstantFn @dark))
(rule $ColorChange (bright) (ConstantFn @bright))
(rule $ColorChange (light) (ConstantFn @bright))

(rule $Assign (set) (ConstantFn null))
(rule $Assign (make) (ConstantFn null))
(rule $Assign (change) (ConstantFn null))
(rule $Assign (draw) (ConstantFn null))
(rule $Assign (show) (ConstantFn null))
(rule $Assign (equal) (ConstantFn null))
(rule $Assign (=) (ConstantFn null))
(rule $Assign ($LEMMA_TOKEN) (IdentityFn))

(rule $StopWord (what) (ConstantFn null))
(rule $StopWord (why) (ConstantFn null))
(rule $StopWord (how) (ConstantFn null))
(rule $StopWord (when) (ConstantFn null))
(rule $StopWord (please) (ConstantFn null))
(rule $StopWord ($StopWord $StopWord) (ConcatFn " "))

(rule $StopNoun (data) (ConstantFn null))
(rule $StopNoun (subset) (ConstantFn null))
(rule $StopNoun (item) (ConstantFn null))
(rule $StopNoun (element) (ConstantFn null))
(rule $StopNoun ((all optional) ($Prep optional) ($Det optional) data $LEMMA_TOKEN) (ConstantFn null))
(rule $StopNoun ($LEMMA_PHRASE) (ConstantFn null))
(rule $StopNoun ($LEMMA_TOKEN) (ConstantFn null))

# Utils
(rule $NumberToString ($Number) (lambda x (call .toString (var x))))